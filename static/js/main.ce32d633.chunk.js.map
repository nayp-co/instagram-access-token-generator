{"version":3,"sources":["Components/Parser.module.css","Components/App.module.css","utils/constants.js","utils/rest.js","utils/host.js","Components/Generator.js","Components/Parser.js","serviceWorker.js","index.js","Components/App.js","Components/Generator.module.css"],"names":["module","exports","Parser","app","PATHS","Object","freeze","GENERATOR","PARSER","HASH","HTTP","ACCESS_TOKEN","requestTokenUrl","clientId","redirectUri","concat","fetch","method","Generator","_useState","useState","_useState2","slicedToArray","input","setInput","react_default","a","createElement","className","style","header","body","onSubmit","e","preventDefault","then","resp","window","location","url","formBox","label","name","placeholder","onChange","target","value","button","type","footer","href","Boolean","hostname","match","ReactDOM","render","react_router_dom","react_router","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,OAAA,4CCAlBF,EAAAC,QAAA,CAAkBE,IAAA,wNCDZC,EAAQC,OAAOC,OAAO,CAC1BC,UAAW,YACXC,OAAQ,WAOJC,GAJWJ,OAAOC,OAAO,CAC7BI,KAAM,SAGKL,OAAOC,OAAO,CACzBK,aAAc,gCCPVC,EAAkB,SAAAC,GAEtB,IAAMC,EAAW,GAAAC,OCAR,oDDAQ,KAAAA,OAAqBX,EAAMI,QAS5C,OAAOQ,MAND,wDACEH,EACA,iBACAC,EACA,uBAEU,CAAEG,OAAQ,SE6CfC,MArDf,WAAqB,IAAAC,EAEOC,mBAAS,IAFhBC,EAAAhB,OAAAiB,EAAA,EAAAjB,CAAAc,EAAA,GAEZI,EAFYF,EAAA,GAELG,EAFKH,EAAA,GAcnB,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMX,WACpBO,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAMC,QAAzB,gBAEEL,EAAAC,EAAAC,cAAA,WAFF,0BAMAF,EAAAC,EAAAC,cAAA,WAASC,UAAWC,IAAME,MACxBN,EAAAC,EAAAC,cAAA,QAAMK,SAnBG,SAAAC,GACbA,EAAEC,iBAEFtB,EAAgBW,GACbY,KAAK,SAAAC,GACJC,OAAOC,SAAP,GAAAvB,OAAqBqB,EAAKG,KAA1BxB,OAAgCN,EAAKE,kBAenCc,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMW,SACpBf,EAAAC,EAAAC,cAAA,SAAOC,UAAWC,IAAMY,OAAxB,aACAhB,EAAAC,EAAAC,cAAA,SACEC,UAAWC,IAAMN,MACjBmB,KAAK,YACLC,YAAY,4BACZC,SAAU,SAAAX,GACRA,EAAEC,iBACFV,EAASS,EAAEY,OAAOC,WAGxBrB,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAMkB,OAAQC,KAAK,UAAtC,YAMJvB,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAMoB,QAAzB,UACU,IACRxB,EAAAC,EAAAC,cAAA,KACEkB,OAAO,QACPK,KAAK,iDAFP,iCCnCOhD,MAVf,WACE,OACEuB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAM3B,QACpBuB,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAMC,QAAzB,wBCKcqB,QACW,cAA7Bd,OAAOC,SAASc,UAEe,UAA7Bf,OAAOC,SAASc,UAEhBf,OAAOC,SAASc,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cCEhB,WACE,OACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAM1B,KACpBsB,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW1C,IACjCO,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,KAAK,UAAUC,OAAK,EAACC,UAAW1D,QDRjC,MAAS2D,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC,kCGlInBnE,EAAAC,QAAA,CAAkBiB,UAAA","file":"static/js/main.ce32d633.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Parser\":\"Parser_Parser__vTbCo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__H5qs7\"};","const PATHS = Object.freeze({\n  GENERATOR: 'generator',\n  PARSER: 'parser',\n});\n\nconst PROTOCOL = Object.freeze({\n  HTTP: 'http',\n});\n\nconst HASH = Object.freeze({\n  ACCESS_TOKEN: '#access_token=ACCESS-TOKEN',\n})\n\nexport {\n  PATHS,\n  PROTOCOL,\n  HASH\n};\n","import { checkHost } from \"./host\";\nimport { PATHS } from \"./constants\";\n\nconst requestTokenUrl = clientId => {\n\n  const redirectUri = `${checkHost()}/${PATHS.PARSER}`\n\n  const url =\n        'https://api.instagram.com/oauth/authorize/?client_id='\n        + clientId\n        + '&redirect_uri='\n        + redirectUri\n        + '&response_type=token';\n\n  return fetch(url, { method: 'GET'})\n}\n\nexport { requestTokenUrl }","\nconst checkHost = () => {\n  if (process.env.NODE_ENV === 'development') {\n    return 'localhost:3000'\n  } else {\n    return 'http://instagram-accessotoken-generator.github.io';\n  }\n}\n\nexport { checkHost };\n","import React, { useState } from 'react';\n\nimport style from  './Generator.module.css';\nimport { requestTokenUrl } from '../utils/rest';\nimport { HASH } from '../utils/constants';\n\nfunction Generator() {\n  \n  const [input, setInput] = useState('');\n\n  const submit = e => {\n    e.preventDefault();\n\n    requestTokenUrl(input)\n      .then(resp => {\n        window.location = `${resp.url}${HASH.ACCESS_TOKEN}`;\n        //window.location.reload();\n      });\n  }\n\n  return (\n    <div className={style.Generator}>\n      <header className={style.header}>\n        Generate your\n        <br />\n        Instagram Access Token\n      </header>\n\n      <section className={style.body}>\n        <form onSubmit={submit}>\n          <div className={style.formBox}>\n            <label className={style.label}>Client id</label>\n            <input\n              className={style.input}\n              name=\"client_id\"\n              placeholder=\"enter with your client_id\"\n              onChange={e => {\n                e.preventDefault();\n                setInput(e.target.value);\n              }} />\n          </div>\n          <button className={style.button} type=\"submit\">\n            submit\n          </button>\n        </form>\n      </section>\n\n      <footer className={style.footer}>\n        What is{' '}\n        <a\n          target=\"blank\"\n          href=\"https://weblizar.com/get-instagram-client-id/\">\n          Client Id\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default Generator;\n","import React from 'react';\n\nimport style from  './Parser.module.css';\n\nfunction Parser() {\n  return (\n    <div className={style.Parser}>\n      <header className={style.header}>\n        parseando o #token\n      </header>\n    </div>\n  );\n}\n\nexport default Parser;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React from 'react';\n\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport style from  './App.module.css';\nimport Generator from './Generator';\nimport Parser from './Parser';\n\nfunction App() {\n  return (\n    <div className={style.app}>\n      <BrowserRouter>\n        <div>\n          <Route path=\"/\" exact component={Generator} />\n          <Route path=\"/parser\" exact component={Parser} />\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport { App };\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Generator\":\"Generator_Generator__27ZZu\"};"],"sourceRoot":""}